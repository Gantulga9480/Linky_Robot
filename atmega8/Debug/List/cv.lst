
AVRASM ver. 2.1.30  C:\Users\halo9\Desktop\Hicheel\Junior_2\F.EE333\led_control\atmega8\Debug\List\cv.asm Fri Mar 05 02:38:21 2021

C:\Users\halo9\Desktop\Hicheel\Junior_2\F.EE333\led_control\atmega8\Debug\List\cv.asm(1086): warning: Register r5 already defined by the .DEF directive
C:\Users\halo9\Desktop\Hicheel\Junior_2\F.EE333\led_control\atmega8\Debug\List\cv.asm(1087): warning: Register r4 already defined by the .DEF directive
C:\Users\halo9\Desktop\Hicheel\Junior_2\F.EE333\led_control\atmega8\Debug\List\cv.asm(1088): warning: Register r7 already defined by the .DEF directive
C:\Users\halo9\Desktop\Hicheel\Junior_2\F.EE333\led_control\atmega8\Debug\List\cv.asm(1089): warning: Register r6 already defined by the .DEF directive
C:\Users\halo9\Desktop\Hicheel\Junior_2\F.EE333\led_control\atmega8\Debug\List\cv.asm(1090): warning: Register r9 already defined by the .DEF directive
C:\Users\halo9\Desktop\Hicheel\Junior_2\F.EE333\led_control\atmega8\Debug\List\cv.asm(1091): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8L
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8L
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _tx_wr_index=R6
                 	.DEF _tx_rd_index=R9
                 	.DEF _tx_counter=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c035      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b c0a0      	RJMP _usart_rx_isr
00000c cff3      	RJMP 0x00
00000d c0cc      	RJMP _usart_tx_isr
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _tbl10_G100:
000013 2710
000014 03e8
000015 0064
000016 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000017 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000018 1000
000019 0100
00001a 0010
00001b 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00001c 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001d 0000
00001e 0000      	.DB  0x0,0x0,0x0,0x0
00001f 0000      	.DB  0x0,0x0
                 
                 _0x2C:
000020 0563
000021 0000
000022 6300
000023 0004      	.DB  0x63,0x5,0x0,0x0,0x0,0x63,0x4,0x0
000024 0000
000025 0363
000026 0000
000027 6300      	.DB  0x0,0x0,0x63,0x3,0x0,0x0,0x0,0x63
000028 0002
000029 0000
00002a 0163
00002b 0000      	.DB  0x2,0x0,0x0,0x0,0x63,0x1,0x0,0x0
00002c 6300
00002d 0000
00002e 0000      	.DB  0x0,0x63,0x0,0x0,0x0,0x0
                 
                 __GLOBAL_INI_TBL:
00002f 0001      	.DW  0x01
000030 0002      	.DW  0x02
000031 0038      	.DW  __REG_BIT_VARS*2
                 
000032 0006      	.DW  0x06
000033 0004      	.DW  0x04
000034 003a      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000035 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000036 94f8      	CLI
000037 27ee      	CLR  R30
000038 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000039 e0f1      	LDI  R31,1
00003a bffb      	OUT  GICR,R31
00003b bfeb      	OUT  GICR,R30
00003c bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003d e08d      	LDI  R24,(14-2)+1
00003e e0a2      	LDI  R26,2
00003f 27bb      	CLR  R27
                 __CLEAR_REG:
000040 93ed      	ST   X+,R30
000041 958a      	DEC  R24
000042 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000043 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000044 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000045 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000046 93ed      	ST   X+,R30
000047 9701      	SBIW R24,1
000048 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000049 e5ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004b 9185      	LPM  R24,Z+
00004c 9195      	LPM  R25,Z+
00004d 9700      	SBIW R24,0
00004e f061      	BREQ __GLOBAL_INI_END
00004f 91a5      	LPM  R26,Z+
000050 91b5      	LPM  R27,Z+
000051 9005      	LPM  R0,Z+
000052 9015      	LPM  R1,Z+
000053 01bf      	MOVW R22,R30
000054 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000055 9005      	LPM  R0,Z+
000056 920d      	ST   X+,R0
000057 9701      	SBIW R24,1
000058 f7e1      	BRNE __GLOBAL_INI_LOOP
000059 01fb      	MOVW R30,R22
00005a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005b e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005c bfed      	OUT  SPL,R30
00005d e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005f e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000060 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000061 c08c      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.14 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : Linky_Robot
                 ;Version : 0.0.1
                 ;Date    : 2/26/2021
                 ;Author  : Gantulga
                 ;Company : MUST
                 ;Comments:
                 ;GGWP
                 ;
                 ;
                 ;Chip type               : ATmega8L
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include "LED.h"
                 
                 	.CSEG
                 _led_init:
                 ; .FSTART _led_init
000062 d130      	RCALL SUBOPT_0x0
                 ;	*led -> Y+0
000063 d132      	RCALL SUBOPT_0x1
000064 9614      	ADIW R26,4
000065 e0e0      	LDI  R30,LOW(0)
000066 93ec      	ST   X,R30
000067 d131      	RCALL SUBOPT_0x2
000068 f421      	BRNE _0x6
000069 b217      	IN   R1,23
00006a d135      	RCALL SUBOPT_0x3
00006b bbe7      	OUT  0x17,R30
00006c c00b      	RJMP _0x5
                 _0x6:
00006d d139      	RCALL SUBOPT_0x4
00006e f421      	BRNE _0x7
00006f b214      	IN   R1,20
000070 d12f      	RCALL SUBOPT_0x3
000071 bbe4      	OUT  0x14,R30
000072 c005      	RJMP _0x5
                 _0x7:
000073 d137      	RCALL SUBOPT_0x5
000074 f419      	BRNE _0x5
000075 b211      	IN   R1,17
000076 d129      	RCALL SUBOPT_0x3
000077 bbe1      	OUT  0x11,R30
                 _0x5:
000078 d11d      	RCALL SUBOPT_0x1
000079 9613      	ADIW R26,3
00007a e0e1      	LDI  R30,LOW(1)
00007b 93ec      	ST   X,R30
00007c c02d      	RJMP _0x2060001
                 ; .FEND
                 _led_on:
                 ; .FSTART _led_on
00007d d131      	RCALL SUBOPT_0x6
                 ;	*led -> Y+0
00007e f021      	BREQ _0xA
00007f d135      	RCALL SUBOPT_0x7
000080 81e4      	LDD  R30,Z+4
000081 30e0      	CPI  R30,0
000082 f009      	BREQ _0xB
                 _0xA:
000083 c00f      	RJMP _0x9
                 _0xB:
000084 d114      	RCALL SUBOPT_0x2
000085 f411      	BRNE _0xF
000086 d131      	RCALL SUBOPT_0x8
000087 c007      	RJMP _0xE
                 _0xF:
000088 d11e      	RCALL SUBOPT_0x4
000089 f411      	BRNE _0x10
00008a d135      	RCALL SUBOPT_0x9
00008b c003      	RJMP _0xE
                 _0x10:
00008c d11e      	RCALL SUBOPT_0x5
00008d f409      	BRNE _0xE
00008e d139      	RCALL SUBOPT_0xA
                 _0xE:
00008f d106      	RCALL SUBOPT_0x1
000090 9614      	ADIW R26,4
000091 e0e1      	LDI  R30,LOW(1)
000092 93ec      	ST   X,R30
                 _0x9:
000093 c016      	RJMP _0x2060001
                 ; .FEND
                 _led_off:
                 ; .FSTART _led_off
000094 d11a      	RCALL SUBOPT_0x6
                 ;	*led -> Y+0
000095 f021      	BREQ _0x13
000096 d11e      	RCALL SUBOPT_0x7
000097 81e4      	LDD  R30,Z+4
000098 30e0      	CPI  R30,0
000099 f409      	BRNE _0x14
                 _0x13:
00009a c00f      	RJMP _0x12
                 _0x14:
00009b d0fd      	RCALL SUBOPT_0x2
00009c f411      	BRNE _0x18
00009d d11a      	RCALL SUBOPT_0x8
00009e c007      	RJMP _0x17
                 _0x18:
00009f d107      	RCALL SUBOPT_0x4
0000a0 f411      	BRNE _0x19
0000a1 d11e      	RCALL SUBOPT_0x9
0000a2 c003      	RJMP _0x17
                 _0x19:
0000a3 d107      	RCALL SUBOPT_0x5
0000a4 f409      	BRNE _0x17
0000a5 d122      	RCALL SUBOPT_0xA
                 _0x17:
0000a6 d0ef      	RCALL SUBOPT_0x1
0000a7 9614      	ADIW R26,4
0000a8 e0e0      	LDI  R30,LOW(0)
0000a9 93ec      	ST   X,R30
                 _0x12:
                 _0x2060001:
0000aa 9622      	ADIW R28,2
0000ab 9508      	RET
                 ; .FEND
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void get_data(unsigned char *data);
                 ;unsigned char resData[2];
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 003C {
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
0000ac d123      	RCALL SUBOPT_0xB
                 ; 0000 003D char status,data;
                 ; 0000 003E status=UCSRA;
0000ad d136      	RCALL __SAVELOCR2
                 ;	status -> R17
                 ;	data -> R16
0000ae b11b      	IN   R17,11
                 ; 0000 003F data=UDR;
0000af b10c      	IN   R16,12
                 ; 0000 0040 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000b0 2fe1      	MOV  R30,R17
0000b1 71ec      	ANDI R30,LOW(0x1C)
0000b2 f489      	BRNE _0x1B
                 ; 0000 0041    {
                 ; 0000 0042    rx_buffer[rx_wr_index++]=data;
0000b3 2de5      	MOV  R30,R5
0000b4 9453      	INC  R5
0000b5 e0f0      	LDI  R31,0
0000b6 59ee      	SUBI R30,LOW(-_rx_buffer)
0000b7 4ffe      	SBCI R31,HIGH(-_rx_buffer)
0000b8 8300      	ST   Z,R16
                 ; 0000 0043 #if RX_BUFFER_SIZE == 256
                 ; 0000 0044    // special case for receiver buffer size=256
                 ; 0000 0045    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 0046 #else
                 ; 0000 0047    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
0000b9 e0e8      	LDI  R30,LOW(8)
0000ba 15e5      	CP   R30,R5
0000bb f409      	BRNE _0x1C
0000bc 2455      	CLR  R5
                 ; 0000 0048    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x1C:
0000bd 9473      	INC  R7
0000be e0e8      	LDI  R30,LOW(8)
0000bf 15e7      	CP   R30,R7
0000c0 f419      	BRNE _0x1D
                 ; 0000 0049       {
                 ; 0000 004A       rx_counter=0;
0000c1 2477      	CLR  R7
                 ; 0000 004B       rx_buffer_overflow=1;
0000c2 9468      	SET
0000c3 f820      	BLD  R2,0
                 ; 0000 004C       }
                 ; 0000 004D #endif
                 ; 0000 004E    }
                 _0x1D:
                 ; 0000 004F }
                 _0x1B:
0000c4 9109      	LD   R16,Y+
0000c5 9119      	LD   R17,Y+
0000c6 c022      	RJMP _0x4C
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0056 {
                 _getchar:
                 ; .FSTART _getchar
                 ; 0000 0057 char data;
                 ; 0000 0058 while (rx_counter==0);
0000c7 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x1E:
0000c8 2077      	TST  R7
0000c9 f3f1      	BREQ _0x1E
                 ; 0000 0059 data=rx_buffer[rx_rd_index++];
0000ca 2de4      	MOV  R30,R4
0000cb 9443      	INC  R4
0000cc e0f0      	LDI  R31,0
0000cd 59ee      	SUBI R30,LOW(-_rx_buffer)
0000ce 4ffe      	SBCI R31,HIGH(-_rx_buffer)
0000cf 8110      	LD   R17,Z
                 ; 0000 005A #if RX_BUFFER_SIZE != 256
                 ; 0000 005B if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
0000d0 e0e8      	LDI  R30,LOW(8)
0000d1 15e4      	CP   R30,R4
0000d2 f409      	BRNE _0x21
0000d3 2444      	CLR  R4
                 ; 0000 005C #endif
                 ; 0000 005D #asm("cli")
                 _0x21:
0000d4 94f8      	cli
                 ; 0000 005E --rx_counter;
0000d5 947a      	DEC  R7
                 ; 0000 005F #asm("sei")
0000d6 9478      	sei
                 ; 0000 0060 return data;
0000d7 2fe1      	MOV  R30,R17
0000d8 9119      	LD   R17,Y+
0000d9 9508      	RET
                 ; 0000 0061 }
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 8
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index=0,tx_rd_index=0;
                 ;#else
                 ;unsigned int tx_wr_index=0,tx_rd_index=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE < 256
                 ;unsigned char tx_counter=0;
                 ;#else
                 ;unsigned int tx_counter=0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 0077 {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
0000da d0f5      	RCALL SUBOPT_0xB
                 ; 0000 0078 if (tx_counter)
0000db 2088      	TST  R8
0000dc f061      	BREQ _0x22
                 ; 0000 0079    {
                 ; 0000 007A    --tx_counter;
0000dd 948a      	DEC  R8
                 ; 0000 007B    UDR=tx_buffer[tx_rd_index++];
0000de 2de9      	MOV  R30,R9
0000df 9493      	INC  R9
0000e0 e0f0      	LDI  R31,0
0000e1 59e6      	SUBI R30,LOW(-_tx_buffer)
0000e2 4ffe      	SBCI R31,HIGH(-_tx_buffer)
0000e3 81e0      	LD   R30,Z
0000e4 b9ec      	OUT  0xC,R30
                 ; 0000 007C #if TX_BUFFER_SIZE != 256
                 ; 0000 007D    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
0000e5 e0e8      	LDI  R30,LOW(8)
0000e6 15e9      	CP   R30,R9
0000e7 f409      	BRNE _0x23
0000e8 2499      	CLR  R9
                 ; 0000 007E #endif
                 ; 0000 007F    }
                 _0x23:
                 ; 0000 0080 }
                 _0x22:
                 _0x4C:
0000e9 91e9      	LD   R30,Y+
0000ea bfef      	OUT  SREG,R30
0000eb 91f9      	LD   R31,Y+
0000ec 91e9      	LD   R30,Y+
0000ed 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 0087 {
                 ; 0000 0088 while (tx_counter == TX_BUFFER_SIZE);
                 ;	c -> Y+0
                 ; 0000 0089 #asm("cli")
                 ; 0000 008A if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
                 ; 0000 008B    {
                 ; 0000 008C    tx_buffer[tx_wr_index++]=c;
                 ; 0000 008D #if TX_BUFFER_SIZE != 256
                 ; 0000 008E    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
                 ; 0000 008F #endif
                 ; 0000 0090    ++tx_counter;
                 ; 0000 0091    }
                 ; 0000 0092 else
                 ; 0000 0093    UDR=c;
                 ; 0000 0094 #asm("sei")
                 ; 0000 0095 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;void main(void)
                 ; 0000 009D {
                 _main:
                 ; .FSTART _main
                 ; 0000 009E // Declare your local variables here
                 ; 0000 009F LED l1 = {'c', 0};
                 ; 0000 00A0 LED l2 = {'c', 1};
                 ; 0000 00A1 LED l3 = {'c', 2};
                 ; 0000 00A2 LED l4 = {'c', 3};
                 ; 0000 00A3 LED l5 = {'c', 4};
                 ; 0000 00A4 LED l6 = {'c', 5};
                 ; 0000 00A5 
                 ; 0000 00A6 led_init(&l1);
0000ee 976e      	SBIW R28,30
0000ef e18e      	LDI  R24,30
0000f0 e0a0      	LDI  R26,LOW(0)
0000f1 e0b0      	LDI  R27,HIGH(0)
0000f2 e4e0      	LDI  R30,LOW(_0x2C*2)
0000f3 e0f0      	LDI  R31,HIGH(_0x2C*2)
0000f4 d0f5      	RCALL __INITLOCB
                 ;	l1 -> Y+25
                 ;	l2 -> Y+20
                 ;	l3 -> Y+15
                 ;	l4 -> Y+10
                 ;	l5 -> Y+5
                 ;	l6 -> Y+0
0000f5 01de      	MOVW R26,R28
0000f6 9659      	ADIW R26,25
0000f7 df6a      	RCALL _led_init
                 ; 0000 00A7 led_init(&l2);
0000f8 01de      	MOVW R26,R28
0000f9 9654      	ADIW R26,20
0000fa df67      	RCALL _led_init
                 ; 0000 00A8 led_init(&l3);
0000fb 01de      	MOVW R26,R28
0000fc 961f      	ADIW R26,15
0000fd df64      	RCALL _led_init
                 ; 0000 00A9 led_init(&l4);
0000fe 01de      	MOVW R26,R28
0000ff 961a      	ADIW R26,10
000100 df61      	RCALL _led_init
                 ; 0000 00AA led_init(&l5);
000101 01de      	MOVW R26,R28
000102 9615      	ADIW R26,5
000103 df5e      	RCALL _led_init
                 ; 0000 00AB led_init(&l6);
000104 01de      	MOVW R26,R28
000105 df5c      	RCALL _led_init
                 ; 0000 00AC 
                 ; 0000 00AD // Input/Output Ports initialization
                 ; 0000 00AE // Port B initialization
                 ; 0000 00AF // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00B0 //DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
                 ; 0000 00B1 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00B2 //PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
                 ; 0000 00B3 
                 ; 0000 00B4 // Port C initialization
                 ; 0000 00B5 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00B6 //DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
                 ; 0000 00B7 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
                 ; 0000 00B8 //PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
                 ; 0000 00B9 
                 ; 0000 00BA // Port D initialization
                 ; 0000 00BB // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00BC //DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
                 ; 0000 00BD // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00BE //PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
                 ; 0000 00BF 
                 ; 0000 00C0 // Timer/Counter 0 initialization
                 ; 0000 00C1 // Clock source: System Clock
                 ; 0000 00C2 // Clock value: Timer 0 Stopped
                 ; 0000 00C3 TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
000106 e0e0      	LDI  R30,LOW(0)
000107 bfe3      	OUT  0x33,R30
                 ; 0000 00C4 TCNT0=0x00;
000108 bfe2      	OUT  0x32,R30
                 ; 0000 00C5 
                 ; 0000 00C6 // Timer/Counter 1 initialization
                 ; 0000 00C7 // Clock source: System Clock
                 ; 0000 00C8 // Clock value: Timer1 Stopped
                 ; 0000 00C9 // Mode: Normal top=0xFFFF
                 ; 0000 00CA // OC1A output: Disconnected
                 ; 0000 00CB // OC1B output: Disconnected
                 ; 0000 00CC // Noise Canceler: Off
                 ; 0000 00CD // Input Capture on Falling Edge
                 ; 0000 00CE // Timer1 Overflow Interrupt: Off
                 ; 0000 00CF // Input Capture Interrupt: Off
                 ; 0000 00D0 // Compare A Match Interrupt: Off
                 ; 0000 00D1 // Compare B Match Interrupt: Off
                 ; 0000 00D2 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000109 bdef      	OUT  0x2F,R30
                 ; 0000 00D3 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00010a bdee      	OUT  0x2E,R30
                 ; 0000 00D4 TCNT1H=0x00;
00010b bded      	OUT  0x2D,R30
                 ; 0000 00D5 TCNT1L=0x00;
00010c bdec      	OUT  0x2C,R30
                 ; 0000 00D6 ICR1H=0x00;
00010d bde7      	OUT  0x27,R30
                 ; 0000 00D7 ICR1L=0x00;
00010e bde6      	OUT  0x26,R30
                 ; 0000 00D8 OCR1AH=0x00;
00010f bdeb      	OUT  0x2B,R30
                 ; 0000 00D9 OCR1AL=0x00;
000110 bdea      	OUT  0x2A,R30
                 ; 0000 00DA OCR1BH=0x00;
000111 bde9      	OUT  0x29,R30
                 ; 0000 00DB OCR1BL=0x00;
000112 bde8      	OUT  0x28,R30
                 ; 0000 00DC 
                 ; 0000 00DD // Timer/Counter 2 initialization
                 ; 0000 00DE // Clock source: System Clock
                 ; 0000 00DF // Clock value: Timer2 Stopped
                 ; 0000 00E0 // Mode: Normal top=0xFF
                 ; 0000 00E1 // OC2 output: Disconnected
                 ; 0000 00E2 ASSR=0<<AS2;
000113 bde2      	OUT  0x22,R30
                 ; 0000 00E3 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000114 bde5      	OUT  0x25,R30
                 ; 0000 00E4 TCNT2=0x00;
000115 bde4      	OUT  0x24,R30
                 ; 0000 00E5 OCR2=0x00;
000116 bde3      	OUT  0x23,R30
                 ; 0000 00E6 
                 ; 0000 00E7 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00E8 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
000117 bfe9      	OUT  0x39,R30
                 ; 0000 00E9 
                 ; 0000 00EA // External Interrupt(s) initialization
                 ; 0000 00EB // INT0: Off
                 ; 0000 00EC // INT1: Off
                 ; 0000 00ED MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000118 bfe5      	OUT  0x35,R30
                 ; 0000 00EE 
                 ; 0000 00EF // USART initialization
                 ; 0000 00F0 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00F1 // USART Receiver: On
                 ; 0000 00F2 // USART Transmitter: On
                 ; 0000 00F3 // USART Mode: Asynchronous
                 ; 0000 00F4 // USART Baud Rate: 9600
                 ; 0000 00F5 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
000119 b9eb      	OUT  0xB,R30
                 ; 0000 00F6 UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00011a ede8      	LDI  R30,LOW(216)
00011b b9ea      	OUT  0xA,R30
                 ; 0000 00F7 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
00011c e8e6      	LDI  R30,LOW(134)
00011d bde0      	OUT  0x20,R30
                 ; 0000 00F8 UBRRH=0x00;
00011e e0e0      	LDI  R30,LOW(0)
00011f bde0      	OUT  0x20,R30
                 ; 0000 00F9 UBRRL=0x67;
000120 e6e7      	LDI  R30,LOW(103)
000121 b9e9      	OUT  0x9,R30
                 ; 0000 00FA 
                 ; 0000 00FB // Analog Comparator initialization
                 ; 0000 00FC // Analog Comparator: Off
                 ; 0000 00FD // The Analog Comparator's positive input is
                 ; 0000 00FE // connected to the AIN0 pin
                 ; 0000 00FF // The Analog Comparator's negative input is
                 ; 0000 0100 // connected to the AIN1 pin
                 ; 0000 0101 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000122 e8e0      	LDI  R30,LOW(128)
000123 b9e8      	OUT  0x8,R30
                 ; 0000 0102 SFIOR=(0<<ACME);
000124 e0e0      	LDI  R30,LOW(0)
000125 bfe0      	OUT  0x30,R30
                 ; 0000 0103 
                 ; 0000 0104 // ADC initialization
                 ; 0000 0105 // ADC disabled
                 ; 0000 0106 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000126 b9e6      	OUT  0x6,R30
                 ; 0000 0107 
                 ; 0000 0108 // SPI initialization
                 ; 0000 0109 // SPI disabled
                 ; 0000 010A SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000127 b9ed      	OUT  0xD,R30
                 ; 0000 010B 
                 ; 0000 010C // TWI initialization
                 ; 0000 010D // TWI disabled
                 ; 0000 010E TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000128 bfe6      	OUT  0x36,R30
                 ; 0000 010F 
                 ; 0000 0110 // Global enable interrupts
                 ; 0000 0111 #asm("sei")
000129 9478      	sei
                 ; 0000 0112 
                 ; 0000 0113 while(1)
                 _0x2D:
                 ; 0000 0114 {
                 ; 0000 0115     get_data(resData);
00012a e6a0      	LDI  R26,LOW(_resData)
00012b e0b1      	LDI  R27,HIGH(_resData)
00012c d04d      	RCALL _get_data
                 ; 0000 0116     if(resData[0] == 49)
00012d d0a7      	RCALL SUBOPT_0xC
00012e 33a1      	CPI  R26,LOW(0x31)
00012f f451      	BRNE _0x30
                 ; 0000 0117     { // 1
                 ; 0000 0118         if(resData[1] == 49)
000130 d0a7      	RCALL SUBOPT_0xD
000131 f421      	BRNE _0x31
                 ; 0000 0119         {
                 ; 0000 011A             led_on(&l1);
000132 01de      	MOVW R26,R28
000133 9659      	ADIW R26,25
000134 df48      	RCALL _led_on
                 ; 0000 011B         }
                 ; 0000 011C         else
000135 c003      	RJMP _0x32
                 _0x31:
                 ; 0000 011D         {
                 ; 0000 011E             led_off(&l1);
000136 01de      	MOVW R26,R28
000137 9659      	ADIW R26,25
000138 df5b      	RCALL _led_off
                 ; 0000 011F         }
                 _0x32:
                 ; 0000 0120     }
                 ; 0000 0121     else if(resData[0] == 50)
000139 c03e      	RJMP _0x33
                 _0x30:
00013a d09a      	RCALL SUBOPT_0xC
00013b 33a2      	CPI  R26,LOW(0x32)
00013c f451      	BRNE _0x34
                 ; 0000 0122     { // 2
                 ; 0000 0123         if(resData[1] == 49)
00013d d09a      	RCALL SUBOPT_0xD
00013e f421      	BRNE _0x35
                 ; 0000 0124         {
                 ; 0000 0125             led_on(&l2);
00013f 01de      	MOVW R26,R28
000140 9654      	ADIW R26,20
000141 df3b      	RCALL _led_on
                 ; 0000 0126         }
                 ; 0000 0127         else
000142 c003      	RJMP _0x36
                 _0x35:
                 ; 0000 0128         {
                 ; 0000 0129             led_off(&l2);
000143 01de      	MOVW R26,R28
000144 9654      	ADIW R26,20
000145 df4e      	RCALL _led_off
                 ; 0000 012A         }
                 _0x36:
                 ; 0000 012B     }
                 ; 0000 012C     else if(resData[0] == 51)
000146 c031      	RJMP _0x37
                 _0x34:
000147 d08d      	RCALL SUBOPT_0xC
000148 33a3      	CPI  R26,LOW(0x33)
000149 f451      	BRNE _0x38
                 ; 0000 012D     { // 3
                 ; 0000 012E         if(resData[1] == 49)
00014a d08d      	RCALL SUBOPT_0xD
00014b f421      	BRNE _0x39
                 ; 0000 012F         {
                 ; 0000 0130             led_on(&l3);
00014c 01de      	MOVW R26,R28
00014d 961f      	ADIW R26,15
00014e df2e      	RCALL _led_on
                 ; 0000 0131         }
                 ; 0000 0132         else
00014f c003      	RJMP _0x3A
                 _0x39:
                 ; 0000 0133         {
                 ; 0000 0134             led_off(&l3);
000150 01de      	MOVW R26,R28
000151 961f      	ADIW R26,15
000152 df41      	RCALL _led_off
                 ; 0000 0135         }
                 _0x3A:
                 ; 0000 0136     }
                 ; 0000 0137     else if(resData[0] == 52)
000153 c024      	RJMP _0x3B
                 _0x38:
000154 d080      	RCALL SUBOPT_0xC
000155 33a4      	CPI  R26,LOW(0x34)
000156 f451      	BRNE _0x3C
                 ; 0000 0138     { // 4
                 ; 0000 0139         if(resData[1] == 49)
000157 d080      	RCALL SUBOPT_0xD
000158 f421      	BRNE _0x3D
                 ; 0000 013A         {
                 ; 0000 013B             led_on(&l4);
000159 01de      	MOVW R26,R28
00015a 961a      	ADIW R26,10
00015b df21      	RCALL _led_on
                 ; 0000 013C         }
                 ; 0000 013D         else
00015c c003      	RJMP _0x3E
                 _0x3D:
                 ; 0000 013E         {
                 ; 0000 013F             led_off(&l4);
00015d 01de      	MOVW R26,R28
00015e 961a      	ADIW R26,10
00015f df34      	RCALL _led_off
                 ; 0000 0140         }
                 _0x3E:
                 ; 0000 0141     }
                 ; 0000 0142     else if(resData[0] == 53)
000160 c017      	RJMP _0x3F
                 _0x3C:
000161 d073      	RCALL SUBOPT_0xC
000162 33a5      	CPI  R26,LOW(0x35)
000163 f451      	BRNE _0x40
                 ; 0000 0143     { // 5
                 ; 0000 0144         if(resData[1] == 49)
000164 d073      	RCALL SUBOPT_0xD
000165 f421      	BRNE _0x41
                 ; 0000 0145         {
                 ; 0000 0146             led_on(&l5);
000166 01de      	MOVW R26,R28
000167 9615      	ADIW R26,5
000168 df14      	RCALL _led_on
                 ; 0000 0147         }
                 ; 0000 0148         else
000169 c003      	RJMP _0x42
                 _0x41:
                 ; 0000 0149         {
                 ; 0000 014A             led_off(&l5);
00016a 01de      	MOVW R26,R28
00016b 9615      	ADIW R26,5
00016c df27      	RCALL _led_off
                 ; 0000 014B         }
                 _0x42:
                 ; 0000 014C     }
                 ; 0000 014D     else if(resData[0] == 54)
00016d c00a      	RJMP _0x43
                 _0x40:
00016e d066      	RCALL SUBOPT_0xC
00016f 33a6      	CPI  R26,LOW(0x36)
000170 f439      	BRNE _0x44
                 ; 0000 014E     { // 6
                 ; 0000 014F         if(resData[1] == 49)
000171 d066      	RCALL SUBOPT_0xD
000172 f419      	BRNE _0x45
                 ; 0000 0150         {
                 ; 0000 0151             led_on(&l6);
000173 01de      	MOVW R26,R28
000174 df08      	RCALL _led_on
                 ; 0000 0152         }
                 ; 0000 0153         else
000175 c002      	RJMP _0x46
                 _0x45:
                 ; 0000 0154         {
                 ; 0000 0155             led_off(&l6);
000176 01de      	MOVW R26,R28
000177 df1c      	RCALL _led_off
                 ; 0000 0156         }
                 _0x46:
                 ; 0000 0157     }
                 ; 0000 0158     else {}
                 _0x44:
                 _0x43:
                 _0x3F:
                 _0x3B:
                 _0x37:
                 _0x33:
                 ; 0000 0159 }
000178 cfb1      	RJMP _0x2D
                 ; 0000 015A }
                 _0x48:
000179 cfff      	RJMP _0x48
                 ; .FEND
                 ;
                 ;void get_data(unsigned char *data)
                 ; 0000 015D {
                 _get_data:
                 ; .FSTART _get_data
                 ; 0000 015E     int i;
                 ; 0000 015F     for(i = 0; i < 2; i++)
00017a d018      	RCALL SUBOPT_0x0
00017b d068      	RCALL __SAVELOCR2
                 ;	*data -> Y+2
                 ;	i -> R16,R17
                +
00017c e000     +LDI R16 , LOW ( 0 )
00017d e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4A:
                +
00017e 3002     +CPI R16 , LOW ( 2 )
00017f e0e0     +LDI R30 , HIGH ( 2 )
000180 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000181 f474      	BRGE _0x4B
                 ; 0000 0160     {
                 ; 0000 0161         data[i] = getchar();
000182 01f8      	MOVW R30,R16
000183 81aa      	LDD  R26,Y+2
000184 81bb      	LDD  R27,Y+2+1
000185 0fea      	ADD  R30,R26
000186 1ffb      	ADC  R31,R27
000187 93ff      	PUSH R31
000188 93ef      	PUSH R30
000189 df3d      	RCALL _getchar
00018a 91af      	POP  R26
00018b 91bf      	POP  R27
00018c 93ec      	ST   X,R30
                 ; 0000 0162     }
                +
00018d 5f0f     +SUBI R16 , LOW ( - 1 )
00018e 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00018f cfee      	RJMP _0x4A
                 _0x4B:
                 ; 0000 0163 }
000190 d056      	RCALL __LOADLOCR2
000191 9624      	ADIW R28,4
000192 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _resData:
000160           	.BYTE 0x2
                 _rx_buffer:
000162           	.BYTE 0x8
                 _tx_buffer:
00016a           	.BYTE 0x8
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000193 93ba      	ST   -Y,R27
000194 93aa      	ST   -Y,R26
000195 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
000196 81a8      	LD   R26,Y
000197 81b9      	LDD  R27,Y+1
000198 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2:
000199 dffc      	RCALL SUBOPT_0x1
00019a 91ec      	LD   R30,X
00019b e0f0      	LDI  R31,0
00019c 36e2      	CPI  R30,LOW(0x62)
00019d e0a0      	LDI  R26,HIGH(0x62)
00019e 07fa      	CPC  R31,R26
00019f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x3:
0001a0 81e8      	LD   R30,Y
0001a1 81f9      	LDD  R31,Y+1
0001a2 81e1      	LDD  R30,Z+1
0001a3 e0a1      	LDI  R26,LOW(1)
0001a4 d037      	RCALL __LSLB12
0001a5 29e1      	OR   R30,R1
0001a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
0001a7 36e3      	CPI  R30,LOW(0x63)
0001a8 e0a0      	LDI  R26,HIGH(0x63)
0001a9 07fa      	CPC  R31,R26
0001aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
0001ab 36e4      	CPI  R30,LOW(0x64)
0001ac e0a0      	LDI  R26,HIGH(0x64)
0001ad 07fa      	CPC  R31,R26
0001ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
0001af dfe3      	RCALL SUBOPT_0x0
0001b0 81e8      	LD   R30,Y
0001b1 81f9      	LDD  R31,Y+1
0001b2 81e3      	LDD  R30,Z+3
0001b3 30e0      	CPI  R30,0
0001b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
0001b5 81e8      	LD   R30,Y
0001b6 81f9      	LDD  R31,Y+1
0001b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
0001b8 b218      	IN   R1,24
0001b9 dffb      	RCALL SUBOPT_0x7
0001ba 81e1      	LDD  R30,Z+1
0001bb e0a1      	LDI  R26,LOW(1)
0001bc d01f      	RCALL __LSLB12
0001bd 25e1      	EOR  R30,R1
0001be bbe8      	OUT  0x18,R30
0001bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
0001c0 b215      	IN   R1,21
0001c1 dff3      	RCALL SUBOPT_0x7
0001c2 81e1      	LDD  R30,Z+1
0001c3 e0a1      	LDI  R26,LOW(1)
0001c4 d017      	RCALL __LSLB12
0001c5 25e1      	EOR  R30,R1
0001c6 bbe5      	OUT  0x15,R30
0001c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
0001c8 b212      	IN   R1,18
0001c9 dfeb      	RCALL SUBOPT_0x7
0001ca 81e1      	LDD  R30,Z+1
0001cb e0a1      	LDI  R26,LOW(1)
0001cc d00f      	RCALL __LSLB12
0001cd 25e1      	EOR  R30,R1
0001ce bbe2      	OUT  0x12,R30
0001cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
0001d0 93ea      	ST   -Y,R30
0001d1 93fa      	ST   -Y,R31
0001d2 b7ef      	IN   R30,SREG
0001d3 93ea      	ST   -Y,R30
0001d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
0001d5 91a0 0160 	LDS  R26,_resData
0001d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xD:
                +
0001d8 91a0 0161+LDS R26 , _resData + ( 1 )
                 	__GETB2MN _resData,1
0001da 33a1      	CPI  R26,LOW(0x31)
0001db 9508      	RET
                 
                 
                 	.CSEG
                 __LSLB12:
0001dc 23ee      	TST  R30
0001dd 2e0e      	MOV  R0,R30
0001de 2fea      	MOV  R30,R26
0001df f019      	BREQ __LSLB12R
                 __LSLB12L:
0001e0 0fee      	LSL  R30
0001e1 940a      	DEC  R0
0001e2 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
0001e3 9508      	RET
                 
                 __SAVELOCR2:
0001e4 931a      	ST   -Y,R17
0001e5 930a      	ST   -Y,R16
0001e6 9508      	RET
                 
                 __LOADLOCR2:
0001e7 8119      	LDD  R17,Y+1
0001e8 8108      	LD   R16,Y
0001e9 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0001ea 0fac      	ADD  R26,R28
0001eb 1fbd      	ADC  R27,R29
                 __INITLOC0:
0001ec 9005      	LPM  R0,Z+
0001ed 920d      	ST   X+,R0
0001ee 958a      	DEC  R24
0001ef f7e1      	BRNE __INITLOC0
0001f0 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8L register use summary:
r0 :   8 r1 :  11 r2 :   1 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   5 
r8 :   2 r9 :   4 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   9 r17:  12 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   2 r26:  68 r27:  10 r28:  23 r29:   2 r30: 120 r31:  21 
x  :  10 y  :  26 z  :  18 
Registers used: 22 out of 35 (62.9%)

ATmega8L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   2 
adiw  :  21 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   7 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  32 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   0 
cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 clr   :   6 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   4 
cpc   :   4 cpi   :  14 cpse  :   0 dec   :   5 des   :   0 eor   :   3 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   9 
inc   :   4 ld    :  14 ldd   :  14 ldi   :  48 lds   :   2 lpm   :   8 
lsl   :   1 lsr   :   0 mov   :   7 movw  :  22 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   1 ori   :   0 out   :  42 
pop   :   2 push  :   2 rcall :  75 ret   :  21 reti  :   1 rjmp  :  46 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   4 sbi   :   0 sbic  :   0 
sbis  :   0 sbiw  :   4 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   2 sen   :   0 ser   :   0 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  18 std   :   0 
sts   :   0 sub   :   0 subi  :   4 swap  :   0 tst   :   3 wdr   :   0 

Instructions used: 40 out of 114 (35.1%)

ATmega8L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003e2    924     70    994    8192  12.1%
[.dseg] 0x000060 0x000172      0     18     18    1024   1.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
